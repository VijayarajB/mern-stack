{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","Shared/util/validators.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","Shared/components/FormElements/Input.js","Shared/hooks/form-hook.js","Shared/components/FormElements/ImageUpload.js","Places/pages/NewPlaces.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_defineProperty","obj","value","configurable","writable","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","validators","isValid","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","done","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","validator","trim","test","inputReducer","state","action","isTouched","Input","props","useReducer","valid","inputState","dispatch","id","onInput","useEffect","onChangeHandler","event","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","pickedFile","console","log","fileIsValid","files","center","src","alt","onClick","current","click","NewPlaces","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","title","description","address","image","inputHandler","history","useHistory","placeSubmitHandler","preventDefault","formData","FormData","append","process","Authorization","token","Fragment","onClear","onSubmit","asOverlay","disabled"],"mappings":"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","file":"static/js/5.35c1312a.chunk.js","sourcesContent":["import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","//There are several libraries to create forms and validate it eg. Formik - third party libraries\r\n\r\nimport React, {useReducer, useEffect} from \"react\";\r\nimport { validate } from \"../../util/validators\";\r\nimport './Input.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return{\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n            case 'TOUCH': {\r\n                return{\r\n                ...state,\r\n                isTouched: true\r\n                }\r\n            }\r\n\r\n            default:\r\n                return state;\r\n    }\r\n};\r\n\r\nconst Input = props => {\r\n\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: props.value || \"\", \r\n        isTouched:false, \r\n        isValid: props.valid || false\r\n    });\r\n    const{id, onInput} = props;\r\n    const{value, isValid} = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id,onInput,value,isValid]);\r\n\r\n    const onChangeHandler = event => {\r\n        dispatch({\r\n            type: 'CHANGE', \r\n            val: event.target.value, \r\n            validators:props.validators\r\n        });\r\n    };\r\n    const touchHandler = () => {\r\n        dispatch({\r\n              type: 'TOUCH'\r\n        });\r\n    }\r\n    const element = props.element === 'input' ? ( \r\n    <input \r\n    id={props.id} \r\n    type={props.type} \r\n    placeholder={props.placeholder} \r\n    onChange={onChangeHandler}\r\n    onBlur={touchHandler}\r\n    value={inputState.value}\r\n    />\r\n    ):(\r\n        <textarea \r\n        id={props.id} \r\n        rows={props.rows || 3} \r\n        onChange={onChangeHandler} \r\n        onBlur={touchHandler}\r\n        value={inputState.value}/>\r\n    );\r\n    return (\r\n        <div className={`form-control ${!inputState.isValid && inputState.isTouched && `form-control--invalid`}`}>\r\n            <label htmlFor={props.id} >{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;","import { useCallback,useReducer } from \"react\";\r\n\r\n\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n      case 'INPUT_CHANGE':\r\n        let formIsValid = true;\r\n        for (const inputId in state.inputs) {\r\n          if(!state.inputs[inputId]){\r\n            continue;\r\n          }\r\n          if (inputId === action.inputId) {\r\n            formIsValid = formIsValid && action.isValid;\r\n          } else {\r\n            formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n          }\r\n        }\r\n        return {\r\n          ...state,\r\n          inputs: {\r\n            ...state.inputs,\r\n            [action.inputId]: { value: action.value, isValid: action.isValid }\r\n          },\r\n          isValid: formIsValid\r\n        };\r\n        case 'SET_DATA':\r\n            return{\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n     const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: 'INPUT_CHANGE',\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n        type: 'SET_DATA',\r\n        inputs: inputData,\r\n        formIsValid: formValidity\r\n    });\r\n  },[]);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};","import React,{ useRef, useState, useEffect} from \"react\";\r\nimport Button from \"./Button\";\r\nimport './ImageUpload.css';\r\n\r\n// Allows user to pick an image and also show Preview\r\nconst ImageUpload = props => {\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState();\r\n\r\n    const filePickerRef = useRef ();\r\n\r\n    useEffect(() => {\r\n        if(!file){\r\n            return;\r\n        }\r\n        const fileReader  = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(file); // this does not give a promise so we use the above statement\r\n    }, [file]);\r\n\r\n    const pickedHandler = event => {\r\n        console.log(event.target);\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if(event.target.files && event.target.files.length === 1){\r\n            pickedFile = event.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        }\r\n        else{\r\n           setIsValid(false); \r\n           fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    };\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input \r\n            id={props.id} \r\n            ref={filePickerRef} // to locate the input tag to the pickImageHandler \r\n            style={{display: 'none'}} \r\n            type={'file'} \r\n            accept='.jpg,.png,.jpeg'  // accept is a default attribute used in input tags of type= file\r\n            onChange = {pickedHandler}  />\r\n            <div className={`image-upload ${props.center && 'center'}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\"/>}\r\n                    {!previewUrl && <p>Please pick an Image...</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>\r\n                    PICK IMAGE\r\n                </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;","import React, {useContext} from 'react';\r\nimport ImageUpload from '../../Shared/components/FormElements/ImageUpload';\r\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\r\nimport Input from '../../Shared/components/FormElements/Input';\r\nimport Button from '../../Shared/components/FormElements/Button';\r\nimport ErrorModal from '../../Shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../Shared/components/UIElements/LoadingSpinner';\r\nimport {\r\n  VALIDATOR_REQUIRE,\r\n  VALIDATOR_MINLENGTH\r\n} from '../../Shared/util/validators';\r\nimport { useHttpClient } from '../../Shared/hooks/http-hook';\r\nimport { useForm } from '../../Shared/hooks/form-hook';\r\nimport './NewPlaces.css';\r\nimport './UpdatePlace.css';\r\nimport { AuthContext } from '../../Shared/context/auth-context';\r\n\r\n\r\n\r\nconst NewPlaces = () => {\r\n  const auth = useContext(AuthContext);\r\n  const {isLoading, error, sendRequest, clearError} = useHttpClient();\r\n    const [formState, inputHandler] = useForm({\r\n        title: {\r\n          value: '',\r\n          isValid: false\r\n        },\r\n        description: {\r\n          value: '',\r\n          isValid: false\r\n        },\r\n        address: {\r\n          value: '',\r\n          isValid: false\r\n        },\r\n        image: {\r\n          value: null,\r\n          isValid: false\r\n        }\r\n      },\r\n    \r\n      false);\r\n \r\nconst history = useHistory();\r\n  const placeSubmitHandler = async event => {\r\n    event.preventDefault();\r\n    // console.log(formState.inputs);   //send this to the backend later\r\n    try{\r\n      // to get mixture of text and image(binary data) we use FormData and it not requires any headers as it automatically does it.\r\n      const formData = new FormData();\r\n      formData.append('title',formState.inputs.title.value);\r\n      formData.append('description',formState.inputs.description.value);\r\n      formData.append('address',formState.inputs.address.value);\r\n      //formData.append('creator',auth.userId);\r\n      formData.append('image',formState.inputs.image.value);\r\n      \r\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + '/places', 'POST', \r\n    //   JSON.stringify({\r\n    //   title: formState.inputs.title.value,\r\n    //   description: formState.inputs.description.value,\r\n    //   address: formState.inputs.address.value,\r\n    //   creator: auth.userId\r\n    // }),\r\n    // {'Content-Type': 'application/json'}\r\n    formData, {\r\n      Authorization: 'Bearer ' + auth.token\r\n    }\r\n    );\r\n    //Redirect to the next page later\r\n    history.push('/');\r\n    }\r\n    catch(err){}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error = {error} onClear ={clearError}/>\r\n    <form className=\"place-form\" onSubmit={placeSubmitHandler}>\r\n      {isLoading && <LoadingSpinner asOverlay/>}\r\n      <Input\r\n        id=\"title\"\r\n        element=\"input\"\r\n        type=\"text\"\r\n        label=\"Title\"\r\n        validators={[VALIDATOR_REQUIRE()]}\r\n        errorText=\"Please enter a valid title.\"\r\n        onInput={inputHandler}\r\n      />\r\n      <Input\r\n        id=\"description\"\r\n        element=\"textarea\"\r\n        label=\"Description\"\r\n        validators={[VALIDATOR_REQUIRE(), VALIDATOR_MINLENGTH(5)]}\r\n        errorText=\"Please enter a valid description (at least 5 characters).\"\r\n        onInput={inputHandler}\r\n      />\r\n      <Input\r\n        id=\"address\"\r\n        element=\"input\"\r\n        label=\"Address\"\r\n        validators={[VALIDATOR_REQUIRE()]}\r\n        errorText=\"Please enter a valid Address.\"\r\n        onInput={inputHandler}\r\n      />\r\n      <ImageUpload id=\"image\" onInput={inputHandler} errorText=\"Please provide an image\"/>\r\n      <Button type=\"submit\" disabled={!formState.isValid}>\r\n        ADD PLACE\r\n      </Button>\r\n    </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default NewPlaces;\r\n"],"sourceRoot":""}